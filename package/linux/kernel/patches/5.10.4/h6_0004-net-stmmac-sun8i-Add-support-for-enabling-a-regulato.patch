diff -rupN linux-5.10.4/drivers/net/ethernet/stmicro/stmmac/dwmac-sun8i.c linux-5.10.4-patched/drivers/net/ethernet/stmicro/stmmac/dwmac-sun8i.c
--- linux-5.10.4/drivers/net/ethernet/stmicro/stmmac/dwmac-sun8i.c	2021-02-05 04:23:05.681747160 +0100
+++ linux-5.10.4-patched/drivers/net/ethernet/stmicro/stmmac/dwmac-sun8i.c	2021-02-05 04:27:51.410829982 +0100
@@ -61,6 +61,8 @@ struct emac_variant {
  * @ephy_clk:                  reference to the optional EPHY clock for
  *                             the internal PHY
  * @regulator_phy:             reference to the optional regulator
+ * @regulator_phy_io:          reference to the optional regulator for
+ *                             PHY I/O pins
  * @rst_ephy:                  reference to the optional EPHY reset for
  *                             the internal PHY
  * @variant:                   reference to the current board variant
@@ -72,6 +74,7 @@ struct sunxi_priv_data {
 	struct clk *tx_clk;
 	struct clk *ephy_clk;
 	struct regulator *regulator_phy;
+	struct regulator *regulator_phy_io;
 	struct reset_control *rst_ephy;
 	const struct emac_variant *variant;
 	struct regmap_field *regmap_field;
@@ -546,6 +549,12 @@ static int sun8i_dwmac_init(struct platf
 	struct sunxi_priv_data *gmac = priv;
 	int ret;
 
+	ret = regulator_enable(gmac->regulator_phy_io);
+	if (ret) {
+		dev_err(&pdev->dev, "Fail to enable PHY I/O regulator\n");
+		return ret;
+	}
+
 	ret = regulator_enable(gmac->regulator_phy);
 	if (ret) {
 		dev_err(&pdev->dev, "Fail to enable PHY regulator\n");
@@ -1012,6 +1021,7 @@ static void sun8i_dwmac_exit(struct plat
 	clk_disable_unprepare(gmac->tx_clk);
 
 	regulator_disable(gmac->regulator_phy);
+	regulator_disable(gmac->regulator_phy_io);
 }
 
 static void sun8i_dwmac_set_mac_loopback(void __iomem *ioaddr, bool enable)
@@ -1154,6 +1164,15 @@ static int sun8i_dwmac_probe(struct plat
 		return ret;
 	}
 
+	/* Optional regulator for PHY I/O pins */
+	gmac->regulator_phy_io = devm_regulator_get(dev, "phy-io");
+	if (IS_ERR(gmac->regulator_phy_io)) {
+		ret = PTR_ERR(gmac->regulator_phy_io);
+		if (ret != -EPROBE_DEFER)
+			dev_err(dev, "Failed to get PHY I/O regulator (%d)\n", ret);
+		return ret;
+	}
+
 	/* The "GMAC clock control" register might be located in the
 	 * CCU address range (on the R40), or the system control address
 	 * range (on most other sun8i and later SoCs).
