diff -rupN linux-5.10.4/1.patch linux-5.10.4-patched/1.patch
diff -rupN linux-5.10.4/drivers/net/ethernet/stmicro/stmmac/dwmac-sun8i.c linux-5.10.4-patched/drivers/net/ethernet/stmicro/stmmac/dwmac-sun8i.c
--- linux-5.10.4/drivers/net/ethernet/stmicro/stmmac/dwmac-sun8i.c	2021-02-05 04:11:37.699516557 +0100
+++ linux-5.10.4-patched/drivers/net/ethernet/stmicro/stmmac/dwmac-sun8i.c	2021-02-05 04:18:02.974767986 +0100
@@ -57,19 +57,21 @@ struct emac_variant {
 };
 
 /* struct sunxi_priv_data - hold all sunxi private data
- * @tx_clk:	reference to MAC TX clock
- * @ephy_clk:	reference to the optional EPHY clock for the internal PHY
- * @regulator:	reference to the optional regulator
- * @rst_ephy:	reference to the optional EPHY reset for the internal PHY
- * @variant:	reference to the current board variant
- * @regmap:	regmap for using the syscon
- * @internal_phy_powered: Does the internal PHY is enabled
- * @mux_handle:	Internal pointer used by mdio-mux lib
+ * @tx_clk:                    reference to MAC TX clock
+ * @ephy_clk:                  reference to the optional EPHY clock for
+ *                             the internal PHY
+ * @regulator_phy:             reference to the optional regulator
+ * @rst_ephy:                  reference to the optional EPHY reset for
+ *                             the internal PHY
+ * @variant:                   reference to the current board variant
+ * @regmap:                    regmap for using the syscon
+ * @internal_phy_powered:      Does the internal PHY is enabled
+ * @mux_handle:                        Internal pointer used by mdio-mux lib
  */
 struct sunxi_priv_data {
 	struct clk *tx_clk;
 	struct clk *ephy_clk;
-	struct regulator *regulator;
+	struct regulator *regulator_phy;
 	struct reset_control *rst_ephy;
 	const struct emac_variant *variant;
 	struct regmap_field *regmap_field;
@@ -544,16 +546,15 @@ static int sun8i_dwmac_init(struct platf
 	struct sunxi_priv_data *gmac = priv;
 	int ret;
 
-	ret = regulator_enable(gmac->regulator);
+	ret = regulator_enable(gmac->regulator_phy);
 	if (ret) {
-		dev_err(&pdev->dev, "Fail to enable regulator\n");
+		dev_err(&pdev->dev, "Fail to enable PHY regulator\n");
 		return ret;
 	}
 
 	ret = clk_prepare_enable(gmac->tx_clk);
 	if (ret) {
-		if (gmac->regulator)
-			regulator_disable(gmac->regulator);
+		regulator_disable(gmac->regulator_phy);
 		dev_err(&pdev->dev, "Could not enable AHB clock\n");
 		return ret;
 	}
@@ -1010,7 +1011,7 @@ static void sun8i_dwmac_exit(struct plat
 
 	clk_disable_unprepare(gmac->tx_clk);
 
-	regulator_disable(gmac->regulator);
+	regulator_disable(gmac->regulator_phy);
 }
 
 static void sun8i_dwmac_set_mac_loopback(void __iomem *ioaddr, bool enable)
@@ -1147,11 +1148,9 @@ static int sun8i_dwmac_probe(struct plat
 	}
 
 	/* Optional regulator for PHY */
-	gmac->regulator = devm_regulator_get(dev, "phy");
-	if (IS_ERR(gmac->regulator)) {
-		ret = PTR_ERR(gmac->regulator);
-		if (ret != -EPROBE_DEFER)
-			dev_err(dev, "Failed to get PHY regulator (%d)\n", ret);
+	gmac->regulator_phy = devm_regulator_get(dev, "phy");
+	if (IS_ERR(gmac->regulator_phy)) {
+		dev_err_probe(dev, ret, "Failed to get PHY regulator\n");
 		return ret;
 	}
 
